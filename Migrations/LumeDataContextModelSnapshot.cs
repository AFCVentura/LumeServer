// <auto-generated />
using System;
using LumeServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LumeServer.Migrations
{
    [DbContext(typeof(LumeDataContext))]
    partial class LumeDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LumeServer.Models.Movie.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CentroidVectorJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Adult")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("longtext");

                    b.Property<long>("Budget")
                        .HasColumnType("bigint");

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<string>("Homepage")
                        .HasColumnType("longtext");

                    b.Property<string>("ImdbId")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Overview")
                        .HasColumnType("longtext");

                    b.Property<float>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Revenue")
                        .HasColumnType("bigint");

                    b.Property<float>("Runtime")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Tagline")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float>("VoteAverage")
                        .HasColumnType("float");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieKeyword", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("MovieKeywords");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieProductionCompany", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCompanyId");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MovieProductionCompanies");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieProductionCountry", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCountryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCountryId");

                    b.HasIndex("ProductionCountryId");

                    b.ToTable("MovieProductionCountries");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieSpokenLanguage", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("SpokenLanguageId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "SpokenLanguageId");

                    b.HasIndex("SpokenLanguageId");

                    b.ToTable("MovieSpokenLanguages");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.ProductionCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductionCountries");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.SpokenLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SpokenLanguages");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("MaxVoteAverage")
                        .HasColumnType("float");

                    b.Property<int>("MaxVoteCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxYear")
                        .HasColumnType("int");

                    b.Property<float>("MinVoteAverage")
                        .HasColumnType("float");

                    b.Property<int>("MinVoteCount")
                        .HasColumnType("int");

                    b.Property<int>("MinYear")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExtraAnswers");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraAnswerProductionCountry", b =>
                {
                    b.Property<int>("ExtraAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCountryId")
                        .HasColumnType("int");

                    b.HasKey("ExtraAnswerId", "ProductionCountryId");

                    b.HasIndex("ProductionCountryId");

                    b.ToTable("ExtraAnswerProductionCountries");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraAnswerSpokenLanguage", b =>
                {
                    b.Property<int>("ExtraAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("SpokenLanguageId")
                        .HasColumnType("int");

                    b.HasKey("ExtraAnswerId", "SpokenLanguageId");

                    b.HasIndex("SpokenLanguageId");

                    b.ToTable("ExtraAnswerSpokenLanguages");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsGeneralProfile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ExtraQuestions");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ThemeQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemeQuestionId");

                    b.ToTable("ThemeAnswers");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeAnswerGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeAnswerId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "ThemeAnswerId");

                    b.HasIndex("ThemeAnswerId");

                    b.ToTable("ThemeAnswerGenres");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeAnswerKeyword", b =>
                {
                    b.Property<int>("ThemeAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.HasKey("ThemeAnswerId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("ThemeAnswerKeywords");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsGeneralProfile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ThemeQuestions");
                });

            modelBuilder.Entity("LumeServer.Models.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("MaxVoteAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(10.1f);

                    b.Property<int>("MaxVoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000000);

                    b.Property<int>("MaxYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5000);

                    b.Property<float>("MinVoteAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.Property<int>("MinVoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MinYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LumeServer.Models.User.UserDailyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsTheLatest")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("MaxVoteAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(10.1f);

                    b.Property<int>("MaxVoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000000);

                    b.Property<int>("MaxYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5000);

                    b.Property<float>("MinVoteAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.Property<int>("MinVoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MinYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDailyProfiles");
                });

            modelBuilder.Entity("LumeServer.Models.User.UserDailyProfileCluster", b =>
                {
                    b.Property<int>("UserDailyProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.HasKey("UserDailyProfileId", "ClusterId");

                    b.HasIndex("ClusterId");

                    b.ToTable("UserDailyProfileClusters");
                });

            modelBuilder.Entity("LumeServer.Models.User.UserGeneralProfileCluster", b =>
                {
                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ClusterId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGeneralProfileClusters");
                });

            modelBuilder.Entity("LumeServer.Models.User.WatchedList", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchedLists");
                });

            modelBuilder.Entity("LumeServer.Models.User.WishList", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Movie", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Cluster", "Cluster")
                        .WithMany("Movies")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieGenre", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Movie.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieKeyword", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Keyword", "Keyword")
                        .WithMany("MovieKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Movie.Movie", "Movie")
                        .WithMany("MovieKeywords")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieProductionCompany", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Movie", "Movie")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Movie.ProductionCompany", "ProductionCompany")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCompany");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieProductionCountry", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Movie", "Movie")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Movie.ProductionCountry", "ProductionCountry")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("ProductionCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCountry");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.MovieSpokenLanguage", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Movie", "Movie")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Movie.SpokenLanguage", "SpokenLanguage")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("SpokenLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("SpokenLanguage");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraAnswer", b =>
                {
                    b.HasOne("LumeServer.Models.Question.ExtraQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraAnswerProductionCountry", b =>
                {
                    b.HasOne("LumeServer.Models.Question.ExtraAnswer", "ExtraAnswer")
                        .WithMany("ExtraAnswerProductionCountries")
                        .HasForeignKey("ExtraAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Movie.ProductionCountry", "ProductionCountry")
                        .WithMany("ExtraAnswerProductionCountries")
                        .HasForeignKey("ProductionCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraAnswer");

                    b.Navigation("ProductionCountry");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraAnswerSpokenLanguage", b =>
                {
                    b.HasOne("LumeServer.Models.Question.ExtraAnswer", "ExtraAnswer")
                        .WithMany("ExtraAnswerSpokenLanguages")
                        .HasForeignKey("ExtraAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Movie.SpokenLanguage", "SpokenLanguage")
                        .WithMany("ExtraAnswerSpokenLanguages")
                        .HasForeignKey("SpokenLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraAnswer");

                    b.Navigation("SpokenLanguage");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeAnswer", b =>
                {
                    b.HasOne("LumeServer.Models.Question.ThemeQuestion", "ThemeQuestion")
                        .WithMany("ThemeAnswers")
                        .HasForeignKey("ThemeQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemeQuestion");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeAnswerGenre", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Genre", "Genre")
                        .WithMany("ThemeAnswerGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Question.ThemeAnswer", "ThemeAnswer")
                        .WithMany("ThemeAnswerGenres")
                        .HasForeignKey("ThemeAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("ThemeAnswer");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeAnswerKeyword", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Keyword", "Keyword")
                        .WithMany("ThemeAnswerKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.Question.ThemeAnswer", "ThemeAnswer")
                        .WithMany("ThemeAnswerKeywords")
                        .HasForeignKey("ThemeAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("ThemeAnswer");
                });

            modelBuilder.Entity("LumeServer.Models.User.UserDailyProfile", b =>
                {
                    b.HasOne("LumeServer.Models.User.User", "User")
                        .WithMany("DailyProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LumeServer.Models.User.UserDailyProfileCluster", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Cluster", "Cluster")
                        .WithMany("UserDailyProfileClusters")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.User.UserDailyProfile", "UserDailyProfile")
                        .WithMany("UserDailyProfileClusters")
                        .HasForeignKey("UserDailyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");

                    b.Navigation("UserDailyProfile");
                });

            modelBuilder.Entity("LumeServer.Models.User.UserGeneralProfileCluster", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Cluster", "Cluster")
                        .WithMany("UserGeneralProfileClusters")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.User.User", "User")
                        .WithMany("GeneralProfileClusters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LumeServer.Models.User.WatchedList", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Movie", "Movie")
                        .WithMany("WatchedList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.User.User", "User")
                        .WithMany("WatchedList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LumeServer.Models.User.WishList", b =>
                {
                    b.HasOne("LumeServer.Models.Movie.Movie", "Movie")
                        .WithMany("WishList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.User.User", "User")
                        .WithMany("WishList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LumeServer.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LumeServer.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LumeServer.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LumeServer.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Cluster", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("UserDailyProfileClusters");

                    b.Navigation("UserGeneralProfileClusters");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("ThemeAnswerGenres");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Keyword", b =>
                {
                    b.Navigation("MovieKeywords");

                    b.Navigation("ThemeAnswerKeywords");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("MovieKeywords");

                    b.Navigation("MovieProductionCompanies");

                    b.Navigation("MovieProductionCountries");

                    b.Navigation("MovieSpokenLanguages");

                    b.Navigation("WatchedList");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.ProductionCompany", b =>
                {
                    b.Navigation("MovieProductionCompanies");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.ProductionCountry", b =>
                {
                    b.Navigation("ExtraAnswerProductionCountries");

                    b.Navigation("MovieProductionCountries");
                });

            modelBuilder.Entity("LumeServer.Models.Movie.SpokenLanguage", b =>
                {
                    b.Navigation("ExtraAnswerSpokenLanguages");

                    b.Navigation("MovieSpokenLanguages");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraAnswer", b =>
                {
                    b.Navigation("ExtraAnswerProductionCountries");

                    b.Navigation("ExtraAnswerSpokenLanguages");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ExtraQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeAnswer", b =>
                {
                    b.Navigation("ThemeAnswerGenres");

                    b.Navigation("ThemeAnswerKeywords");
                });

            modelBuilder.Entity("LumeServer.Models.Question.ThemeQuestion", b =>
                {
                    b.Navigation("ThemeAnswers");
                });

            modelBuilder.Entity("LumeServer.Models.User.User", b =>
                {
                    b.Navigation("DailyProfiles");

                    b.Navigation("GeneralProfileClusters");

                    b.Navigation("WatchedList");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("LumeServer.Models.User.UserDailyProfile", b =>
                {
                    b.Navigation("UserDailyProfileClusters");
                });
#pragma warning restore 612, 618
        }
    }
}
